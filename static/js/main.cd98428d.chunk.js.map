{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","theme","button","margin","spacing","root","extendedIcon","marginRight","accordion","width","textchan","display","flexWrap","withoutLabel","marginTop","textField","progress","marginLeft","ContainedButtons","classes","React","useState","amount","password","weight","weightRange","showPassword","values","setValues","handleChange","prop","event","target","value","handleClickShowPassword","handleMouseDownPassword","preventDefault","className","Button","variant","color","disabled","href","onClick","alert","Fab","FormControl","component","FormLabel","RadioGroup","row","name","defaultValue","FormControlLabel","control","Radio","label","labelPlacement","Accordion","AccordionSummary","expandIcon","id","stopPropagation","onFocus","Checkbox","AccordionDetails","Typography","TextField","clsx","InputProps","startAdornment","InputAdornment","position","Input","onChange","endAdornment","inputProps","FormHelperText","InputLabel","htmlFor","type","IconButton","onMouseDown","fullWidth","FilledInput","edge","OutlinedInput","labelWidth","CircularProgress","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.cd98428d.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\n\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport clsx from \"clsx\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Input from \"@material-ui/core/Input\";\nimport FilledInput from \"@material-ui/core/FilledInput\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  },\n\n  extendedIcon: {\n    marginRight: theme.spacing(1)\n  },\n\n  accordion: {\n    width: \"100%\"\n  },\n\n  textchan: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  margin: {\n    margin: theme.spacing(1)\n  },\n  withoutLabel: {\n    marginTop: theme.spacing(3)\n  },\n  textField: {\n    width: \"25ch\"\n  },\n\n  progress: {\n    display: \"flex\",\n    \"& > * + *\": {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}));\n\nexport default function ContainedButtons() {\n  const classes = useStyles();\n\n  const [values, setValues] = React.useState({\n    amount: \"\",\n    password: \"\",\n    weight: \"\",\n    weightRange: \"\",\n    showPassword: false\n  });\n\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values, showPassword: !values.showPassword });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <div className={classes.button}>\n      <Button variant=\"contained\">Default</Button>\n      <Button variant=\"contained\" color=\"primary\">\n        Primary\n      </Button>\n      <Button variant=\"contained\" color=\"secondary\">\n        Secondary\n      </Button>\n      <Button variant=\"contained\" disabled>\n        Disabled\n      </Button>\n      <Button variant=\"contained\" color=\"primary\" href=\"#contained-buttons\">\n        Link\n      </Button>\n      <Button\n        onClick={() => {\n          alert(\"clicked\");\n        }}\n      >\n        nyaa\n      </Button>\n\n      <br />\n\n      <div className={classes.root}>\n        <Fab color=\"primary\" aria-label=\"add\">\n          <AddIcon />\n        </Fab>\n        <Fab color=\"secondary\" aria-label=\"edit\">\n          <EditIcon />\n        </Fab>\n        <Fab variant=\"extended\">\n          <NavigationIcon className={classes.extendedIcon} />\n          Navigate\n        </Fab>\n        <Fab disabled aria-label=\"like\">\n          <FavoriteIcon />\n        </Fab>\n        <br />\n\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">labelPlacement</FormLabel>\n          <RadioGroup\n            row\n            aria-label=\"position\"\n            name=\"position\"\n            defaultValue=\"top\"\n          >\n            <FormControlLabel\n              value=\"top\"\n              control={<Radio color=\"primary\" />}\n              label=\"Top\"\n              labelPlacement=\"top\"\n            />\n            <FormControlLabel\n              value=\"start\"\n              control={<Radio color=\"primary\" />}\n              label=\"Start\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"bottom\"\n              control={<Radio color=\"primary\" />}\n              label=\"Bottom\"\n              labelPlacement=\"bottom\"\n            />\n            <FormControlLabel\n              value=\"end\"\n              control={<Radio color=\"primary\" />}\n              label=\"End\"\n            />\n          </RadioGroup>\n        </FormControl>\n        <br />\n\n        <div className={classes.accordion}>\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-label=\"Expand\"\n              aria-controls=\"additional-actions1-content\"\n              id=\"additional-actions1-header\"\n            >\n              <FormControlLabel\n                aria-label=\"Acknowledge\"\n                onClick={(event) => event.stopPropagation()}\n                onFocus={(event) => event.stopPropagation()}\n                control={<Checkbox />}\n                label=\"I acknowledge that I should stop the click event propagation\"\n              />\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography color=\"textSecondary\">\n                The click event of the nested action will propagate up and\n                expand the accordion unless you explicitly stop it.\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-label=\"Expand\"\n              aria-controls=\"additional-actions2-content\"\n              id=\"additional-actions2-header\"\n            >\n              <FormControlLabel\n                aria-label=\"Acknowledge\"\n                onClick={(event) => event.stopPropagation()}\n                onFocus={(event) => event.stopPropagation()}\n                control={<Checkbox />}\n                label=\"I acknowledge that I should stop the focus event propagation\"\n              />\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography color=\"textSecondary\">\n                The focus event of the nested action will propagate up and also\n                focus the accordion unless you explicitly stop it.\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-label=\"Expand\"\n              aria-controls=\"additional-actions3-content\"\n              id=\"additional-actions3-header\"\n            >\n              <FormControlLabel\n                aria-label=\"Acknowledge\"\n                onClick={(event) => event.stopPropagation()}\n                onFocus={(event) => event.stopPropagation()}\n                control={<Checkbox />}\n                label=\"I acknowledge that I should provide an aria-label on each action that I add\"\n              />\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography color=\"textSecondary\">\n                If you forget to put an aria-label on the nested action, the\n                label of the action will also be included in the label of the\n                parent button that controls the accordion expansion.\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n          <br />\n\n          <div className={classes.textchan}>\n            <div>\n              <TextField\n                label=\"With normal TextField\"\n                id=\"standard-start-adornment\"\n                className={clsx(classes.margin, classes.textField)}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">Kg</InputAdornment>\n                  )\n                }}\n              />\n              <FormControl\n                className={clsx(\n                  classes.margin,\n                  classes.withoutLabel,\n                  classes.textField\n                )}\n              >\n                <Input\n                  id=\"standard-adornment-weight\"\n                  value={values.weight}\n                  onChange={handleChange(\"weight\")}\n                  endAdornment={\n                    <InputAdornment position=\"end\">Kg</InputAdornment>\n                  }\n                  aria-describedby=\"standard-weight-helper-text\"\n                  inputProps={{\n                    \"aria-label\": \"weight\"\n                  }}\n                />\n                <FormHelperText id=\"standard-weight-helper-text\">\n                  Weight\n                </FormHelperText>\n              </FormControl>\n              <FormControl className={clsx(classes.margin, classes.textField)}>\n                <InputLabel htmlFor=\"standard-adornment-password\">\n                  Password\n                </InputLabel>\n                <Input\n                  id=\"standard-adornment-password\"\n                  type={values.showPassword ? \"text\" : \"password\"}\n                  value={values.password}\n                  onChange={handleChange(\"password\")}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={handleClickShowPassword}\n                        onMouseDown={handleMouseDownPassword}\n                      >\n                        {values.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </FormControl>\n              <FormControl fullWidth className={classes.margin}>\n                <InputLabel htmlFor=\"standard-adornment-amount\">\n                  Amount\n                </InputLabel>\n                <Input\n                  id=\"standard-adornment-amount\"\n                  value={values.amount}\n                  onChange={handleChange(\"amount\")}\n                  startAdornment={\n                    <InputAdornment position=\"start\">$</InputAdornment>\n                  }\n                />\n              </FormControl>\n            </div>\n            <div>\n              <TextField\n                label=\"With normal TextField\"\n                id=\"filled-start-adornment\"\n                className={clsx(classes.margin, classes.textField)}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">Kg</InputAdornment>\n                  )\n                }}\n                variant=\"filled\"\n              />\n              <FormControl\n                className={clsx(classes.margin, classes.textField)}\n                variant=\"filled\"\n              >\n                <FilledInput\n                  id=\"filled-adornment-weight\"\n                  value={values.weight}\n                  onChange={handleChange(\"weight\")}\n                  endAdornment={\n                    <InputAdornment position=\"end\">Kg</InputAdornment>\n                  }\n                  aria-describedby=\"filled-weight-helper-text\"\n                  inputProps={{\n                    \"aria-label\": \"weight\"\n                  }}\n                />\n                <FormHelperText id=\"filled-weight-helper-text\">\n                  Weight\n                </FormHelperText>\n              </FormControl>\n              <FormControl\n                className={clsx(classes.margin, classes.textField)}\n                variant=\"filled\"\n              >\n                <InputLabel htmlFor=\"filled-adornment-password\">\n                  Password\n                </InputLabel>\n                <FilledInput\n                  id=\"filled-adornment-password\"\n                  type={values.showPassword ? \"text\" : \"password\"}\n                  value={values.password}\n                  onChange={handleChange(\"password\")}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={handleClickShowPassword}\n                        onMouseDown={handleMouseDownPassword}\n                        edge=\"end\"\n                      >\n                        {values.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </FormControl>\n              <FormControl\n                fullWidth\n                className={classes.margin}\n                variant=\"filled\"\n              >\n                <InputLabel htmlFor=\"filled-adornment-amount\">\n                  Amount\n                </InputLabel>\n                <FilledInput\n                  id=\"filled-adornment-amount\"\n                  value={values.amount}\n                  onChange={handleChange(\"amount\")}\n                  startAdornment={\n                    <InputAdornment position=\"start\">$</InputAdornment>\n                  }\n                />\n              </FormControl>\n            </div>\n            <div>\n              <TextField\n                label=\"With normal TextField\"\n                id=\"outlined-start-adornment\"\n                className={clsx(classes.margin, classes.textField)}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">Kg</InputAdornment>\n                  )\n                }}\n                variant=\"outlined\"\n              />\n              <FormControl\n                className={clsx(classes.margin, classes.textField)}\n                variant=\"outlined\"\n              >\n                <OutlinedInput\n                  id=\"outlined-adornment-weight\"\n                  value={values.weight}\n                  onChange={handleChange(\"weight\")}\n                  endAdornment={\n                    <InputAdornment position=\"end\">Kg</InputAdornment>\n                  }\n                  aria-describedby=\"outlined-weight-helper-text\"\n                  inputProps={{\n                    \"aria-label\": \"weight\"\n                  }}\n                  labelWidth={0}\n                />\n                <FormHelperText id=\"outlined-weight-helper-text\">\n                  Weight\n                </FormHelperText>\n              </FormControl>\n              <FormControl\n                className={clsx(classes.margin, classes.textField)}\n                variant=\"outlined\"\n              >\n                <InputLabel htmlFor=\"outlined-adornment-password\">\n                  Password\n                </InputLabel>\n                <OutlinedInput\n                  id=\"outlined-adornment-password\"\n                  type={values.showPassword ? \"text\" : \"password\"}\n                  value={values.password}\n                  onChange={handleChange(\"password\")}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={handleClickShowPassword}\n                        onMouseDown={handleMouseDownPassword}\n                        edge=\"end\"\n                      >\n                        {values.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                  labelWidth={70}\n                />\n              </FormControl>\n              <FormControl\n                fullWidth\n                className={classes.margin}\n                variant=\"outlined\"\n              >\n                <InputLabel htmlFor=\"outlined-adornment-amount\">\n                  Amount\n                </InputLabel>\n                <OutlinedInput\n                  id=\"outlined-adornment-amount\"\n                  value={values.amount}\n                  onChange={handleChange(\"amount\")}\n                  startAdornment={\n                    <InputAdornment position=\"start\">$</InputAdornment>\n                  }\n                  labelWidth={60}\n                />\n              </FormControl>\n              <br />\n              <div className={classes.root}>\n                <CircularProgress />\n                <CircularProgress color=\"secondary\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}